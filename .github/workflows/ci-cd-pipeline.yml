name: HyperDoc AI Powerhouse CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Daily builds

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        run: corepack enable
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Lint code
        run: pnpm run lint
        
      - name: Type checking
        run: pnpm run build
        
      - name: Security audit
        run: pnpm audit --audit-level moderate
        
      - name: Secret scanning
        run: |
          echo "Scanning for exposed secrets..."
          grep -r "sk-" . --exclude-dir=node_modules --exclude-dir=.git || true
          grep -r "api_key" . --exclude-dir=node_modules --exclude-dir=.git || true

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: [security-quality]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: hyperdoc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        run: corepack enable
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run unit tests
        run: pnpm test
        env:
          POSTGRES_URL: postgresql://postgres:test_password@localhost:5432/hyperdoc_test
          REDIS_URL: redis://localhost:6379
          
      - name: Run integration tests
        run: pnpm run test:integration
        env:
          POSTGRES_URL: postgresql://postgres:test_password@localhost:5432/hyperdoc_test
          REDIS_URL: redis://localhost:6379

  # Build and Push Container Images
  build-push:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push orchestrator-api
        uses: docker/build-push-action@v5
        with:
          context: ./apps/orchestrator-api
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/orchestrator-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [build-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 60
          
      - name: Run load tests
        run: |
          # Install k6 for load testing
          curl -s https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xvz --strip-components 1
          ./k6 run tests/load/ai-orchestrator.js
          
      - name: Performance benchmarks
        run: |
          ./ops/scripts/benchmark-providers.sh
          
      - name: Cleanup test environment
        run: docker-compose -f docker-compose.test.yml down

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Configure kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f infra/k8s/namespace.yml
          kubectl apply -f infra/k8s/secrets.yml
          kubectl apply -f infra/k8s/configmaps.yml
          kubectl apply -f infra/k8s/deployments.yml
          kubectl apply -f infra/k8s/services.yml
          kubectl apply -f infra/k8s/ingress.yml
          
      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/orchestrator-api -n hyperdoc-ai --timeout=300s
          kubectl rollout status deployment/onlyoffice-documentserver -n hyperdoc-ai --timeout=300s
          
      - name: Verify deployment health
        run: |
          kubectl get pods -n hyperdoc-ai
          kubectl get services -n hyperdoc-ai
          
      - name: Run smoke tests
        run: |
          ./ops/scripts/smoke-test.sh https://hyperdoc-ai.your-domain.com

  # Update documentation
  update-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Generate API documentation
        run: |
          pnpm install
          pnpm run docs:build
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/api
          
      - name: Update README with latest metrics
        run: |
          ./ops/scripts/update-readme-metrics.sh
          
      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "docs: auto-update documentation and metrics"
          git push